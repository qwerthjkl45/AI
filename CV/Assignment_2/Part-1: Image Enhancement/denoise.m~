function [ imOut ] = denoise( image, kernel_type, varargin)

[h, w] = size(image);
tmp = zeros(h, w, 3, 'uint8');

switch kernel_type
    case 'box'
        for i = 1:size(varargin, 2)
            imOut = imboxfilt(image, varargin{i});
            tmp(:, :, i) = imOut;
        end
        
    case 'median'
        for i = 1:size(varargin, 2)
            imOut = medfilt2(image, [varargin{i} varargin{i}]);
            tmp(:, :, i) = imOut;
        end
    case 'gaussian'
        imOut = gauss2D(image, varargin{1} , varargin{2});
end

if not (all(tmp(:) == 0))
    subplot(2, 2, 1);
    imshow(image);
    title('original image');

    subplot(2, 2, 2);
    imshow(image);
    title('original image');

    subplot(2, 2, 3);
    imshow(image);
    title('original image');

    subplot(2, 2, 4);
    imshow(tmp(:, :, 3));
    psnr_val = myPSNR(image, tmp(:, :, 3));
    str= strcat(kernel_type, ' with size 7x7. PSNR val: ');
    str = strcat(str, num2str(psnr_val));
    disp(psnr_val);
    title(str);    
  
    
end

imshow(imOut);
end
